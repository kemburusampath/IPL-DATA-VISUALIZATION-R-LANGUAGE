names(map)<-c("city","matches")
Geo=givsGeoMap(map,locationvar="city",numvar="matches",options=list(height=350,dataMode="regions"))
Geo=gvisGeoMap(map,locationvar="city",numvar="matches",options=list(height=350,dataMode="regions"))
plot(Geo)
library(shiny)
library(shiny)
runApp("my_app")
source('C:/Users/LENOVO/Downloads/partnership.R')
source('C:/Users/LENOVO/Downloads/partnership.R')
source('C:/Users/LENOVO/Downloads/partnership.R')
source('C:/Users/LENOVO/Downloads/partnership.R')
deliveries<-read.csv("E:/internproject_on_ipl/deliveries.csv",header=T,na.strings="")
matches<-read.csv("E:/internproject_on_ipl/matches.csv",header=T,na.strings="")
library(sqldf)
library(plotly)
library(ggplot2)
l<-sqldf("SELECT id,season from matches")
colnames(l) <- c("match_id","season")
am<- sqldf("SELECT * from deliveries left join l using(match_id)")
bat<- subset(am,select=c(batsman,batsman_runs,season,match_id,non_striker))
partnership<-aggregate(cbind(max_runs =batsman_runs)~batsman+season+match_id+non_striker,data=bat,FUN="sum")
View(partnership)
shiny::runApp('sample1')
partnership<-aggregate(cbind(max_runs =batsman_runs)~batsman+non_striker+season,data=bat,FUN="sum")
library(shiny)
library(ggplot2)
library(plotly)
deliveries<-read.csv("E:/internproject_on_ipl/deliveries.csv",header=T,na.strings="")
matches<-read.csv("E:/internproject_on_ipl/matches.csv",header=T,na.strings="")
win_season<-aggregate(cbind(No_Of_Matches_Won =winner)~winner+season,data=matches,FUN=function(x){NROW(x)})
teams<-subset(matches,select=c(team1,season))
agg<-aggregate(cbind(count=team1)~season,data=teams,FUN=function(x){NROW(x)})
require("sqldf")
l<-sqldf("SELECT id,season from matches")
colnames(l) <- c("match_id","season")
am<- sqldf("SELECT * from deliveries left join l using(match_id)")
bat<- subset(am,select=c(batsman,batsman_runs,season,match_id,non_striker))
partnership<-aggregate(cbind(max_runs =batsman_runs)~batsman+non_striker+season,data=bat,FUN="sum")
runApp('sample1')
best<-subset(partnership,season==season)
best1<-subset(best,batsman==batsman)
best2<-subset(best1,non_striker==non_striker)
teams<-subset(win_season,season==season)
k<-ggplot(teams,aes(winner,No_Of_Matches_Won,fill=winner))+geom_col() +ggtitle("No.Of  Matches")
ggplotly(k)
teams1<-subset(agg,season==season)
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
best<-subset(partnership,season=="2008")
View(best)
best1<-subset(best,batsman=="ADJ Hussey")
View(best1)
best1<-subset(best,batsman=="AB de Villiers")
View(best1)
best2<-subset(best1,non_striker=="KD Karthik")
View(best2)
runApp('sample1')
best<-subset(partnership,season=="2015")
best1<-subset(best,batsman=="AB de Villiers")
runApp('sample1')
best<-subset(partnership,season==season)
runApp('sample1')
best2<-subset(best1,non_striker==non_striker)
best1<-subset(best,batsman=="M Kartik")
best2<-subset(best1,non_striker==non_striker)
runApp('sample1')
runApp('sample1')
best<-subset(partnership,season==2008)
best1<-subset(best,batsman=="A Chopra")
best2<-subset(best1,non_striker=="SC Ganguly")
runApp('sample1')
best<-subset(partnership,season==season)
best1<-subset(best,batsman=="A Chopra")
View(best1)
best2<-subset(best1,non_striker==non_striker)
runApp('sample1')
best2<-subset(best1,non_striker=="SC Ganguly")
View(best2)
runApp('sample1')
best1<-subset(best,batsman=="M Kartik")
best2<-subset(best1,non_striker==non_striker)
runApp('sample1')
runApp('sample1')
runApp('sample1')
best<-subset(partnership,season==season)
best1<-subset(best,batsman=batsman)
best2<-subset(best1,non_striker==non_striker)
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
View(partnership)
for(x in input$season){
best<-subset(partnership,season==x)
best1<-subset(best,batsman==x $batsman)
best2<-subset(best1,non_striker==x$non_striker)
}
})
for(x in season){
best<-subset(partnership,season==x)
best1<-subset(best,batsman==x $batsman)
best2<-subset(best1,non_striker==x$non_striker)
}
})
for(x in partnership$season){
best<-subset(partnership,season==x)
best1<-subset(best,batsman==x $batsman)
best2<-subset(best1,non_striker==x$non_striker)
}
View(best)
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
runApp('sample1')
require(ggmap)
win_each_season <-aggregate(cbind(No_Of_Matches = city)~city,data=matches,FUN=function(x){NROW(x)})
deliveries<-read.csv("E:/internproject_on_ipl/deliveries.csv",header=T,na.strings="")
matches<-read.csv("E:/internproject_on_ipl/matches.csv",header=T,na.strings="")
require(ggmap)
win_each_season <-aggregate(cbind(No_Of_Matches = city)~city,data=matches,FUN=function(x){NROW(x)})
cities<-data.frame(win_each_season$city)
geo_location<-geocode(as.character(cities$win_each_season.city))
city_location<-cbind(cities,geo_location)
library(shiny)
library(leaflet)
library(leaflet)
require(ggplot2)
data_red=data.frame(city_location$lon,city_location$lat, city_location$win_each_season.city)
data_blue=data.frame(city_location$lon,city_location$lat, city_location$win_each_season.city)
sa<-leaflet() %>%
setView(lng=78, lat=25, zoom=8 ) %>%
# Add two tiles
addProviderTiles("Esri.WorldImagery", group="background 1") %>%
addTiles(options = providerTileOptions(noWrap = TRUE), group="background 2") %>%
# Add 2 marker groups
addCircleMarkers(data=data_red, lng=~city_location$lon , lat=~city_location$lat, radius=8 , color="black",  fillColor="red", stroke = TRUE, fillOpacity = 0.8, group="Red") %>%
addCircleMarkers(data=data_blue, lng=~city_location$lon , lat=~city_location$lat, radius=8 , color="black",  fillColor="blue", stroke = TRUE, fillOpacity = 0.8, group="Blue") %>%
# Add the control widget
addLayersControl(overlayGroups = c("Red","Blue") , baseGroups = c("background 1","background 2"), options = layersControlOptions(collapsed = FALSE))
sa
View(win_each_season)
View(cities)
View(geo_location)
View(city_location)
require(ggmap)
geo_location<-geocode(as.character(cities$win_each_season.city))
require(ggmap)
deliveries<-read.csv("E:/internproject_on_ipl/deliveries.csv",header=T,na.strings="")
matches<-read.csv("E:/internproject_on_ipl/matches.csv",header=T,na.strings="")
require(ggplot2)
library(ggplot2)
library(plotly)
require(sqldf)
library(sqldf)
win_season<-aggregate(cbind(No_Of_Matches_Won =winner)~winner+season,data=matches,FUN=function(x){NROW(x)})
winner_season <-head(win_season[order((win_season$season),(win_season$winner),decreasing =TRUE ),],90)
count_winner<-sqldf("SELECT * from winner_season ORDER BY season,No_Of_Matches_Won DESC ")
season2008<-subset(count_winner,season==2008)
season2009<-subset(count_winner,season==2009)
season2010<-subset(count_winner,season==2010)
season2011<-subset(count_winner,season==2011)
season2012<-subset(count_winner,season==2012)
season2013<-subset(count_winner,season==2013)
season2014<-subset(count_winner,season==2014)
season2015<-subset(count_winner,season==2015)
season2016<-subset(count_winner,season==2016)
par(mfrow=c(3,3))
pie(season2008$No_Of_Matches_Won,season2008$winner,main="wins by teams in 2008")
pie(season2008$No_Of_Matches_Won,season2008$winner,main="wins by teams in 2008")
season2008<-subset(count_winner,season==2008)
season2009<-subset(count_winner,season==2009)
season2010<-subset(count_winner,season==2010)
season2011<-subset(count_winner,season==2011)
season2012<-subset(count_winner,season==2012)
season2013<-subset(count_winner,season==2013)
season2014<-subset(count_winner,season==2014)
season2015<-subset(count_winner,season==2015)
season2016<-subset(count_winner,season==2016)
par(mfrow=c(3,3))
pie(season2008$No_Of_Matches_Won,season2008$winner,main="wins by teams in 2008")
library(shiny)
library(ggplot2)
library(plotly)
require("sqldf")
require(data.table)
deliveries<-read.csv("E:/internproject_on_ipl/deliveries.csv",header=T,na.strings="")
matches<-read.csv("E:/internproject_on_ipl/matches.csv",header=T,na.strings="")
l<-sqldf("SELECT id,season from matches")
colnames(l) <- c("match_id","season")
am<- sqldf("SELECT * from del left join l using(match_id)")
am<- sqldf("SELECT * from deliveries left join l using(match_id)")
win_season<-aggregate(cbind(No_Of_Matches_Won =winner)~winner+season,data=matches,FUN=function(x){NROW(x)})
bat<- subset(am,select=c(batsman,batsman_runs,season,match_id,non_striker))
partnership<-aggregate(cbind(max_runs =batsman_runs)~batsman+season+non_striker,data=bat,FUN="sum")
batsman_bruns <- subset(del,select=c(batsman,batsman_runs))
deliveries<-read.csv("E:/internproject_on_ipl/deliveries.csv",header=T,na.strings="")
matches<-read.csv("E:/internproject_on_ipl/matches.csv",header=T,na.strings="")
all_seasons<-sqldf("SELECT id,season from matches")
colnames(all_seasons) <- c("match_id","season")
deliverie_season<- sqldf("SELECT * from deliveries left join l using(match_id)")
win_season<-aggregate(cbind(No_Of_Matches_Won =winner)~winner+season,data=matches,FUN=function(x){NROW(x)})
View(win_season)
bat<- subset(deliverie_season,select=c(batsman,batsman_runs,season,match_id,non_striker))
View(bat)
deliveries<-read.csv("E:/internproject_on_ipl/deliveries.csv",header=T,na.strings="")
matches<-read.csv("E:/internproject_on_ipl/matches.csv",header=T,na.strings="")
all_seasons<-sqldf("SELECT id,season from matches")
colnames(all_seasons) <- c("match_id","season")
deliverie_season<- sqldf("SELECT * from deliveries left join l using(match_id)")
win_season<-aggregate(cbind(No_Of_Matches_Won =winner)~winner+season,data=matches,FUN=function(x){NROW(x)})
batsman_run<- subset(deliverie_season,select=c(batsman,batsman_runs,season,match_id,non_striker))
partnership<-aggregate(cbind(max_runs =batsman_runs)~batsman+season+non_striker,data=batsman_run,FUN="sum")
batsman_bruns <- subset(deliveries,select=c(batsman,batsman_runs))
abatsman_bruns <- aggregate(batsman_runs~batsman,data=batsman_bruns,FUN = "sum")
batsman_bruns_each <- subset(am,select=c(batsman,batsman_runs,season))
batsman_bruns_each <- subset(deliverie_season,select=c(batsman,batsman_runs,season))
abatsman_bruns_each <- aggregate(batsman_runs~batsman+season,data=batsman_bruns_each,FUN = "sum")
season_u1<- subset(matches,select=c(season,umpire1))
umpire_dt = data.table(season_u1)
count_u1<-aggregate(cbind(No_of_umpire1= umpire1)~umpire1+season,data=umpire_dt,FUN=function(x){NROW(x)})
season_u2<- subset(matches,select=c(season,umpire2))
umpire_dt1 = data.table(season_u2)
count_u2<-aggregate(cbind(No_of_umpire2= umpire2)~umpire2+season,data=umpire_dt1,FUN=function(x){NROW(x)})
foursdata <- subset(am, batsman_runs == "4")
fours_bman <-subset(foursdata,select=c(batsman_runs,batsman,season))
fours<-aggregate(cbind(No_of_Fours = batsman_runs)~batsman+season,data=fours_bman,FUN=function(x){NROW(x)})
sixdata <- subset(am, batsman_runs == "6")
six_bman <-subset(sixdata,select=c(batsman_runs,batsman,season))
sixes<-aggregate(cbind(No_of_sixes = batsman_runs)~batsman+season,data=six_bman,FUN=function(x){NROW(x)})
catchesdata <- subset(am, dismissal_kind =="caught")
catch <-subset(catchesdata,select=c(dismissal_kind,fielder,season))
kind_field<-aggregate(cbind(count = dismissal_kind)~fielder+season,data=catch,FUN=function(x){NROW(x)})
dismissed<-sqldf("SELECT * from am where dismissal_kind ='bowled' or dismissal_kind ='caught' or dismissal_kind ='caught and bowled' or dismissal_kind = 'hit wicket' or dismissal_kind = 'lbw' or dismissal_kind = 'stumped' ")
top_bowler<-subset(dismissed,select=c(dismissal_kind,bowler,season))
bowler_top<-aggregate(cbind(Wickets_Taken = dismissal_kind)~bowler+season,data=top_bowler,FUN=function(x){NROW(x)})
shinyServer(function(input, output) {
output$value<-renderTable({
print(input$season)
best=subset(partnership,season==input$season)
best1=subset(best,batsman==input$batsman)
best2=subset(best1,non_striker==input$non_striker)
})
output$value1<-renderPlotly({
teams<-subset(win_season,season==input$season1)
k<-ggplot(teams,aes(winner,No_Of_Matches_Won,fill=winner))+geom_col()
ggplotly(k)
})
output$value2<-renderTable({
teams<-subset(matches,select=c(team1,season))
agg<-aggregate(cbind(count=team1)~season,data=teams,FUN=function(x){NROW(x)})
teams1<-subset(agg,season==input$season2)
})
output$value3<-renderPlotly({
print(input$bins)
top_batsman <-head(abatsman_bruns[order(abatsman_bruns$batsman_runs,decreasing=TRUE),],input$bins)
p<-ggplot(top_batsman, aes(batsman, batsman_runs,fill=batsman)) + geom_col()
ggplotly(p)
})
output$value4<-renderTable({
teams5<-subset(abatsman_bruns_each,season==input$season5)
top_batsman <-head(teams5[order(teams5$batsman_runs,decreasing=TRUE),],input$bins1)
#p<-ggplot(top_batsman, aes(batsman, batsman_runs,fill=batsman)) + geom_col()+ggtitle("Top Batsman Runs In All Seasons")
#ggplotly(p)
})
output$value5<-renderPlotly({
fours_each<-subset(fours,season==input$season6)
top_fours<-head(fours_each[order(fours_each$No_of_Fours,decreasing=TRUE),],input$range)
k<-ggplot(top_fours, aes(batsman,No_of_Fours,color=factor(batsman)))+geom_point()
sixes_each<-subset(sixes,season==input$season6)
top_sixes<-head(sixes_each[order(sixes_each$No_of_sixes,decreasing=TRUE),],input$range)
k1<-ggplot(top_sixes, aes(batsman,No_of_sixes,color=factor(batsman)))+geom_point()
count_umpire1<-subset(count_u1,season==input$season6)
top_u1<-head(count_umpire1[order(count_umpire1$No_of_umpire1,decreasing = TRUE),],input$range )
p<-ggplot(top_u1, aes(umpire1,No_of_umpire1,fill=umpire1)) + geom_col()
count_umpire2<-subset(count_u2,season==input$season6)
top_u2<-head(count_umpire2[order(count_umpire2$No_of_umpire2,decreasing = TRUE),],input$range )
p1<-ggplot(top_u2, aes(umpire2,No_of_umpire2,fill=umpire2)) + geom_col()
catches_fielder<-subset(kind_field,season==input$season6)
top<-head(catches_fielder[order(catches_fielder$count,decreasing=TRUE),],input$range)
top_bowlers<-subset(bowler_top,season==input$season6)
top_x_bowlers<-head(top_bowlers[order(top_bowlers$Wickets_Taken,decreasing=TRUE),],10)
switch(input$show_vars,
'1'=ggplotly(p),
'2'=ggplotly(p1),
'3'=ggplotly(k),
'4'=ggplotly(k1),
'5'=plot_ly(labels = top$fielder , values = top$count) %>%
add_pie(hole = 0.6) %>%
layout(title = "highest catches by a fielder with percentage",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE)),
'6'=plot_ly(labels = top_x_bowlers$bowler , values = top_x_bowlers$Wickets_Taken) %>%
add_pie(hole = 0.6) %>%
layout(title = "top 10 bowlers in all seasons with percentages",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
)
})
output$value6<-renderPlotly({
top_fours<-head(fours[order(fours$No_of_Fours,decreasing=TRUE),],input$range1)
k<-ggplot(top_fours, aes(batsman,No_of_Fours,color=factor(batsman)))+geom_point()+ggtitle("Top 4's hit by a batsman")
top_sixes<-head(sixes[order(sixes$No_of_sixes,decreasing=TRUE),],input$range1)
k1<-ggplot(top_sixes, aes(batsman,No_of_sixes,color=factor(batsman)))+geom_point()+ggtitle("Top 6's hit by a batsman")
top <- head(kind_field[order(kind_field$count,decreasing=TRUE),],input$range1)
top_10_bowlers<- head(bowler_top[order(bowler_top$Wickets_Taken,decreasing=TRUE),],input$range1)
switch(input$show_vars1,
'1'=ggplotly(k),
'2'=ggplotly(k1),
'3'=plot_ly(labels = top$fielder , values = top$count) %>%
add_pie(hole = 0.6) %>%
layout(title = "highest catches by a fielder with percentage",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE)),
'4'=plot_ly(labels = top_10_bowlers$bowler , values = top_10_bowlers$Wickets_Taken) %>%
add_pie(hole = 0.6) %>%
layout(title = "top 10 bowlers in all seasons with percentages",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
#'4'=head(sixes[order(sixes$No_of_sixes,decreasing=TRUE),],input$range1),
#'5'=head(kind_field[order(kind_field$count,decreasing=TRUE),],input$range),
#'6'=head(bowler_top[order(bowler_top$Wickets_Taken,decreasing=TRUE),],10)
)
})
})
best=subset(partnership,season==season)
best1=subset(best,batsman==batsman)
best2=subset(best1,non_striker==non_striker)
teams<-subset(win_season,season==season1)
teams<-subset(win_season,season==season)
k<-ggplot(teams,aes(winner,No_Of_Matches_Won,fill=winner))+geom_col()
ggplotly(k)
teams<-subset(matches,select=c(team1,season))
agg<-aggregate(cbind(count=team1)~season,data=teams,FUN=function(x){NROW(x)})
teams1<-subset(agg,season==input$season2)
top_batsman <-head(abatsman_bruns[order(abatsman_bruns$batsman_runs,decreasing=TRUE),],input$bins)
top_batsman <-head(abatsman_bruns[order(abatsman_bruns$batsman_runs,decreasing=TRUE),],bins)
print(bins)
View(agg)
View(teams)
View(teams)
View(agg)
season_aggrigate<-aggregate(cbind(No_of_matches=team1)~season,data=teams,FUN=function(x){NROW(x)})
teams1<-subset(season_aggrigate,season==input$season2)
teams1<-subset(season_aggrigate,season==season)
runApp('final_r_p')
top_batsman <-head(abatsman_bruns[order(abatsman_bruns$batsman_runs,decreasing=TRUE),],input$bins)
fours_each<-subset(fours,season==season)
View(kind_field)
runApp('final_r_p')
top_fours<-head(fours_each[order(fours_each$No_of_Fours,decreasing=TRUE),],input$range)
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
install.packages("shinythemes")
library(shinythemes)
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
shiny::runApp('final_r_p')
require(plotly)
runApp('final_r_p')
library(htmltools)
require(ggmap)
library(shiny)
library(leaflet)
stadiumIcon <- makeIcon(
iconUrl = "C:/Users/LENOVO/Documents/final_r_p/www/stad2.jpg",
iconWidth = 15, iconHeight = 15,
iconAnchorX = 10, iconAnchorY = 50
)
matches_in_each_venue <-aggregate(cbind(No_Of_Matches = venue)~venue,data=matches,FUN=function(x){NROW(x)})
venues<-data.frame(matches_in_each_venue$venue)
geo_location<-geocode(as.character(venues$matches_in_each_venue.venue))
venue_location<-cbind(matches_in_each_venue,geo_location)
leaflet(venue_location) %>% addTiles() %>%
addMarkers(~lon, ~lat,popup = ~as.character(No_Of_Matches), label = ~htmlEscape(venue) ,icon=stadiumIcon)
shiny::runApp('final_r_p')
deliveries<-read.csv("E:/internproject_on_ipl/deliveries.csv",header=T,na.strings="")
matches<-read.csv("E:/internproject_on_ipl/matches.csv",header=T,na.strings="")
id_season<-sqldf("SELECT id,season from matches")
library(shiny)
library(ggplot2)
library(plotly)
require("sqldf")
require(data.table)
deliveries<-read.csv("E:/internproject_on_ipl/deliveries.csv",header=T,na.strings="")
matches<-read.csv("E:/internproject_on_ipl/matches.csv",header=T,na.strings="")
id_season<-sqldf("SELECT id,season from matches")
colnames(id_season) <- c("match_id","season")
deliveries_season<- sqldf("SELECT * from deliveries left join id_season using(match_id)")
win_season<-aggregate(cbind(No_Of_Matches_Won =winner)~winner+season,data=matches,FUN=function(x){NROW(x)})
names(win_season)<-c("Winner","Season","No_of_matches_won")
team_subset<-subset(deliveries_season,select=c(match_id,batting_team,total_runs,season))
teams_aggregate<-aggregate(cbind(max_runs=total_runs)~batting_team+match_id+season,data=team_subset,FUN="sum")
batsman_bruns <- subset(deliveries,select=c(batsman,batsman_runs))
abatsman_bruns <- aggregate(batsman_runs~batsman,data=batsman_bruns,FUN = "sum")
batsman_bruns_each <- subset(deliveries_season,select=c(batsman,batsman_runs,season))
abatsman_bruns_each <- aggregate(batsman_runs~batsman+season,data=batsman_bruns_each,FUN = "sum")
season_u1<- subset(matches,select=c(season,umpire1))
umpire_dt = data.table(season_u1)
count_u1<-aggregate(cbind(No_of_umpire1= umpire1)~umpire1+season,data=umpire_dt,FUN=function(x){NROW(x)})
season_u2<- subset(matches,select=c(season,umpire2))
umpire_dt1 = data.table(season_u2)
count_u2<-aggregate(cbind(No_of_umpire2= umpire2)~umpire2+season,data=umpire_dt1,FUN=function(x){NROW(x)})
foursdata <- subset(deliveries_season, batsman_runs == "4")
fours_bman <-subset(foursdata,select=c(batsman_runs,batsman,season))
fours<-aggregate(cbind(No_of_Fours = batsman_runs)~batsman+season,data=fours_bman,FUN=function(x){NROW(x)})
sixdata <- subset(deliveries_season, batsman_runs == "6")
six_bman <-subset(sixdata,select=c(batsman_runs,batsman,season))
sixes<-aggregate(cbind(No_of_sixes = batsman_runs)~batsman+season,data=six_bman,FUN=function(x){NROW(x)})
catchesdata <- subset(deliveries_season, dismissal_kind =="caught")
catch <-subset(catchesdata,select=c(dismissal_kind,fielder,season))
kind_field<-aggregate(cbind(Dismissal_Count = dismissal_kind)~fielder+season,data=catch,FUN=function(x){NROW(x)})
dismissed<-sqldf("SELECT * from deliveries_season where dismissal_kind ='bowled' or dismissal_kind ='caught' or dismissal_kind ='caught and bowled' or dismissal_kind = 'hit wicket' or dismissal_kind = 'lbw' or dismissal_kind = 'stumped' ")
top_bowler<-subset(dismissed,select=c(dismissal_kind,bowler,season))
bowler_top<-aggregate(cbind(Wickets_Taken = dismissal_kind)~bowler+season,data=top_bowler,FUN=function(x){NROW(x)})
bat<- subset(deliveries_season,select=c(batsman,batsman_runs,season,match_id))
id_venue<-sqldf("SELECT id,season,venue from matches")
colnames(id_venue) <- c("match_id","season","venue")
deliveries_venue<- sqldf("SELECT * from deliveries left join id_venue using(match_id)")
stadium_runs<-subset(deliveries_venue,select=c(match_id,venue,season,total_runs,batting_team))
batsman_runs<-aggregate(cbind(max_runs=total_runs)~venue+match_id+season+batting_team,data=stadium_runs,FUN="sum")
dismissed<-sqldf("SELECT * from deliveries_season where dismissal_kind ='bowled' or dismissal_kind ='caught' or dismissal_kind ='caught and bowled' or dismissal_kind = 'hit wicket' or dismissal_kind = 'lbw' or dismissal_kind = 'stumped' ")
top_bowler<-subset(dismissed,select=c(dismissal_kind,bowler,player_dismissed,season))
bowler_top<-aggregate(cbind(Wickets_Taken = dismissal_kind)~bowler+player_dismissed+season,data=top_bowler,FUN=function(x){NROW(x)})
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
runApp('final_r_p')
